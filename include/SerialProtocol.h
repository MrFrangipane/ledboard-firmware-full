//
// This file was automatically generated by python-arduino-serial
// https://github.com/MrFrangipane/python-arduino-serial
//
#ifndef PLATFORMIO_SERIALPROTOCOL_H
#define PLATFORMIO_SERIALPROTOCOL_H

#include <map>

#include <Arduino.h>


namespace Frangitron {

    class SerialProtocol {
        /*
         * Message topology
         *
         * ```
         * |   0   |    1      |     2     |   n  | 3 + n |
         * | begin | direction | data type | data |  end  |
         * |-------| ------ header ------- | data |-------|
         * ```
         */
    public:
        enum class Direction : int {
            Send,
            Receive
        };

        static constexpr uint8_t headerSize = 2;
        static constexpr byte flagBegin = 0x3c;
        static constexpr byte flagEnd = 0x3e;

        /* //////////////////////////////// */

        enum DataTypeCode : int {
            BoardConfigurationStructCode,
            IlluminationStructCode,
            MappingTreeLeafStructCode,
            MappingTreeStructureStructCode
        };

        struct BoardConfigurationStruct {
            char name[8] = "       ";
            int executionMode = 0;
            int firmwareRevision = 1;
            byte hardwareId[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
            int hardwareRevision = 1;
            byte ipAddress[4] = {0x00, 0x00, 0x00, 0x00};
            int universeA = -1;
            int universeB = -1;
            int universeC = -1;
            int ledPerTransmitter = 250;
            int pixelPerUniverse = 128;
            int pixelType = 0;
            int eraseMappingTreeFile = 0;
            int doSaveAndReboot = 0;
            int doRebootBootloader = 0;
        };
        
        struct IlluminationStruct {
            int type = 0;
            int ledSingle = 0;
            int ledFirst = 0;
            int ledLast = 0;
            int r = 0;
            int g = 0;
            int b = 0;
            int w = 0;
        };
        
        struct MappingTreeLeafStruct {
            int ledId = 0;
            int mappingId = 0;
            int pixelNumber = 0;
            int universeNumber = 0;
        };
        
        struct MappingTreeStructureStruct {
            int universeAPixelsLedCount[128] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            int universeBPixelsLedCount[128] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            int universeCPixelsLedCount[128] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        };

        static const std::map<DataTypeCode, uint16_t> DataSize;
    };

    const std::map<SerialProtocol::DataTypeCode, uint16_t> SerialProtocol::DataSize = {
        {SerialProtocol::DataTypeCode::BoardConfigurationStructCode, sizeof(SerialProtocol::BoardConfigurationStruct)},
        {SerialProtocol::DataTypeCode::IlluminationStructCode, sizeof(SerialProtocol::IlluminationStruct)},
        {SerialProtocol::DataTypeCode::MappingTreeLeafStructCode, sizeof(SerialProtocol::MappingTreeLeafStruct)},
        {SerialProtocol::DataTypeCode::MappingTreeStructureStructCode, sizeof(SerialProtocol::MappingTreeStructureStruct)}
    };
}

#endif // PLATFORMIO_SERIALPROTOCOL_H